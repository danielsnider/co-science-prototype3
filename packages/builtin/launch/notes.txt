Package oriented 
----------------

packages:
  - builtin:
     params:
     nodes:
      - name: image loader
        params: val
        
  - builtin2:
     params:
     nodes:
      - name: image loader
        params: val
        



  - viewer_trigger
    - *
    - first

  - create_rgb_overlay: 
    to: rgb_overlay
    from:
      - images(_filter: [_one_per:experiment, timepoint:1, rows:10:2:20, columns:end-2:end]):
        - labelled: image.segmentation.watershed
        - original: image
        - well_id
        - experiment name
        - filename
        - animal name
        - cell count
      - date(_argument:now)


query ImageLabelDate {
  image: data(experiment: 'one_per') {
    original: image
    label: image.segmentation.watershed
  }
  date
}


Multiple output from node?

image raw
filename
animal name


options
multiple fields on data output from topic (yes) (no: multiple output topics)
num columns could always grow?

multiple optional output or grouped output




Multiple selectors?
too many combinations? no just do it

input_map = {
  'images': [{
    'labelled': 'image.segmentation.watershed',
    'original': 'image'
  }],
  'images': [{
    'labelled': 'image.segmentation.watershed',
    'original': 'image'
  }],
  'date': 'date'
}


Aspect oriented functions?


# actions:
# - topic: viewer_trigger
# - selector: eoi
# - selector: eouo
# 
# one of each type
# every nth
# first n
# last n
# n:m
# n
# 
# plate
# column
# row
# field 
# timepoint
# z


OLD ALL.LAUNCH

nodes:

- name: image loader
  file: reader.py
  package: builtin
  outputs: 
    - image
  params: 
    - input files: '/home/dan/imglib2-tutorials/images/*.tiff'

- name: filters
  file: filter.py
  package: my_filters
  input: 
    - image
  output:
    - image.filter.gaussian: gaus
    - image.filter.laplace
  params: 
    - sigma: 4

- name: segment_nuc
  file: watershed_nuc.py
  package: segmentation
  input: 
    - image
  output:
    - image.segmentation.watershed

- name: rgb_overlay
  file: special_viewer.py
  package: builtin
  inputs: 
    - image
    - image.segmentation.watershed
  params:


actions:

  - viewer_trigger:
    - im0



NEW ALL.LAUNCH

nodes:

- name: image loader
  file: reader.py
  package: builtin
  outputs: 
    - to: image
      fields:      
        - original
        - filename
        
package: my_filters
- name: filters
  file: filter.py  
  input: 
    - from: image
  output:
    - from: image.filter.gaussian
      to: gaus
      fields:
       - image
       - filename
    - from: image.filter.laplace
      to: gaus
      fields: 
        - filename
        - animal_name: animalname


  input_map = {
    'images': [{
      'labelled': 'image.segmentation.watershed',
      'original': 'image'
      'date':'image.meta.date',
      'file name':'image.meta.file name',
      'animal name':'image.meta.animal name',
      'animal name':'image.meta',
    }],
    'art': [{
      'image': 'art.image'
      'style': 'art.style'
    }]
    'date': 'date'
  }



late selector data (Example: image quality)

image
watershed

1. find selector fields not in input nodes
2. ask special selector nodes to resolve requirement to list of ids
3. append special ids to selector and send to node with basic selector support

(favorite)
1. send select stream to basic node
2. check cache (how to check for stream?)
3. get list of data IDs at time of request filtered by basic select query
4. for each data ID, check with special selector nodes and responds with data if it passes
    get_experiment_info_for_image
    get_animal_name_for_image
    get_quality_for_image



selectors go through every node during stream initialization until it goes all the way
up the web of nodes until it reaches the authorities on the request, whom start producing
the data according to the selector and subsequent nodes compute their results.


1. use a big centralized database

